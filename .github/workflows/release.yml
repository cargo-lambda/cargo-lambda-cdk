name: release
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - package.json
      - API.md
  workflow_dispatch: {}

env:
  CI: "true"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Zig toolchain
        uses: korandoru/setup-zig@v1
        with:
          zig-version: 0.13.0
      - name: Install Cargo Lambda
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        with:
          repo: cargo-lambda/cargo-lambda
          tag: v1.5.0
          platform: linux
          arch: x86_64
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.x'
      - uses: actions/setup-go@v4
        with:
          go-version: '1.x'
      - uses: actions/setup-java@v4
        with:
          java-version: '17.x'
          distribution: 'temurin'
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12.3
      - name: Install NPM dependencies
        run: npx projen install:ci
      - name: release
        run: npx projen release
      - name: Release GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install Dependencies
        run: cd npx projen install:ci
      - name: Create JS artifact
        run: npx projen package:js
      - name: Release JS Artifact
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx -p publib@latest publib-npm
  release_maven:
    name: Publish to Maven Central
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17.x'
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install Dependencies
        run: npx projen install:ci
      - name: Create java artifact
        run: npx projen package:java
      - name: Release
        env:
          MAVEN_SERVER_ID: 'github'
          MAVEN_REPOSITORY_URL: 'https://maven.pkg.github.com/cargo-lambda/cargo-lambda-cdk'
          MAVEN_ENDPOINT: 'https://maven.pkg.github.com'
          MAVEN_USERNAME: ${{ github.actor }}
          MAVEN_PASSWORD: ${{ secrets.CDK_PACKAGES_REGISTRY_GITHUB_TOKEN }}
        run: npx -p publib@latest publib-maven
  release_pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12.3
      - name: Install Dependencies
        run: npx projen install:ci
      - name: Create python artifact
        run: npx projen package:python
      - name: Release
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: npx -p publib@latest publib-pypi
  release_nuget:
    name: Publish to NuGet Gallery
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 3.x
      - name: Install Dependencies
        run: npx projen install:ci
      - name: Create dotnet artifact
        run: npx projen package:dotnet
      - name: Release
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: npx -p publib@latest publib-nuget
  release_golang:
    name: Publish to GitHub Go Module Repository
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - uses: actions/setup-go@v4
        with:
          go-version: ^1.16.0
      - name: Install Dependencies
        run: npx projen install:ci
      - name: Create go artifact
        run: npx projen package:go
      - name: Release
        env:
          GIT_USER_NAME: github-actions
          GIT_USER_EMAIL: github-actions@github.com
          GITHUB_TOKEN: ${{ secrets.CDK_PACKAGES_REGISTRY_GITHUB_TOKEN }}
        run: npx -p publib@latest publib-golang
